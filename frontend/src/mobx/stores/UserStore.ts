// state
import { makeAutoObservable } from "mobx";
// stores
import { RootStore } from ".";
import { Contact, StateStore } from "../interfaces";
import { contactInit } from "../data/seed-user";

/** ## User store
 */
export class UserStore implements StateStore {
  // ctor
  constructor(public root: RootStore) {
    // init
    makeAutoObservable(this, {}, { autoBind: true });
  }

  /////////////////////////////////////////////////////////
  ////////////////////// OBSERVABLES //////////////////////
  // @todo remove the seed data when done testing
  contacts: Map<string, Contact> = new Map<string, Contact>(contactInit);
  ////////////////////// OBSERVABLES //////////////////////
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  /////////////////////// COMPUTEDS ///////////////////////
  /////////////////////// COMPUTEDS ///////////////////////
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  //////////////////////// ACTIONS ////////////////////////
  /** ### Add/update single contact to `contacts` collection. */
  setContact(newContact: Contact) {
    this.contacts.set(newContact.id, newContact);
  }
  /** ### Set `contacts` state variable. ### Warning: this replaces the original set. */
  setContacts(newContacts: Contact[]) {
    const mapInitContacts: [string, Contact][] = newContacts.map((c) => {
      return [c.id, c];
    });
    this.contacts = new Map<string, Contact>(mapInitContacts);
  }
  //////////////////////// ACTIONS ////////////////////////
  /////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////
  //////////////////////// HELPERS ////////////////////////
  //////////////////////// HELPERS ////////////////////////
  /////////////////////////////////////////////////////////
}
